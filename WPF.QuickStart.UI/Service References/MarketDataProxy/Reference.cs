//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF.QuickStart.UI.MarketDataProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="tcp://localhost/", ConfigurationName="MarketDataProxy.IMarketData", CallbackContract=typeof(WPF.QuickStart.UI.MarketDataProxy.IMarketDataCallback))]
    public interface IMarketData {
        
        [System.ServiceModel.OperationContractAttribute(Action="tcp://localhost/IMarketData/GetDataSourceList", ReplyAction="tcp://localhost/IMarketData/GetDataSourceListResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[] GetDataSourceList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="tcp://localhost/IMarketData/GetDataSourceList", ReplyAction="tcp://localhost/IMarketData/GetDataSourceListResponse")]
        System.IAsyncResult BeginGetDataSourceList(System.AsyncCallback callback, object asyncState);
        
        object[] EndGetDataSourceList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarketDataCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="tcp://localhost/IMarketData/SendTickUpdate")]
        void SendTickUpdate(int param);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="tcp://localhost/IMarketData/SendTickUpdate")]
        System.IAsyncResult BeginSendTickUpdate(int param, System.AsyncCallback callback, object asyncState);
        
        void EndSendTickUpdate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarketDataChannel : WPF.QuickStart.UI.MarketDataProxy.IMarketData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataSourceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataSourceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarketDataClient : System.ServiceModel.DuplexClientBase<WPF.QuickStart.UI.MarketDataProxy.IMarketData>, WPF.QuickStart.UI.MarketDataProxy.IMarketData {
        
        private BeginOperationDelegate onBeginGetDataSourceListDelegate;
        
        private EndOperationDelegate onEndGetDataSourceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataSourceListCompletedDelegate;
        
        public MarketDataClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MarketDataClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MarketDataClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MarketDataClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MarketDataClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataSourceListCompletedEventArgs> GetDataSourceListCompleted;
        
        public object[] GetDataSourceList() {
            return base.Channel.GetDataSourceList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataSourceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataSourceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object[] EndGetDataSourceList(System.IAsyncResult result) {
            return base.Channel.EndGetDataSourceList(result);
        }
        
        private System.IAsyncResult OnBeginGetDataSourceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDataSourceList(callback, asyncState);
        }
        
        private object[] OnEndGetDataSourceList(System.IAsyncResult result) {
            object[] retVal = this.EndGetDataSourceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataSourceListCompleted(object state) {
            if ((this.GetDataSourceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataSourceListCompleted(this, new GetDataSourceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataSourceListAsync() {
            this.GetDataSourceListAsync(null);
        }
        
        public void GetDataSourceListAsync(object userState) {
            if ((this.onBeginGetDataSourceListDelegate == null)) {
                this.onBeginGetDataSourceListDelegate = new BeginOperationDelegate(this.OnBeginGetDataSourceList);
            }
            if ((this.onEndGetDataSourceListDelegate == null)) {
                this.onEndGetDataSourceListDelegate = new EndOperationDelegate(this.OnEndGetDataSourceList);
            }
            if ((this.onGetDataSourceListCompletedDelegate == null)) {
                this.onGetDataSourceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataSourceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataSourceListDelegate, null, this.onEndGetDataSourceListDelegate, this.onGetDataSourceListCompletedDelegate, userState);
        }
    }
}
